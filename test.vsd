$date
	Mon Dec 18 00:35:15 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module complex_tb $end
$var wire 16 ! z_real [15:0] $end
$var wire 16 " z_imag [15:0] $end
$var reg 8 # a_imag [7:0] $end
$var reg 8 $ a_real [7:0] $end
$var reg 8 % b_imag [7:0] $end
$var reg 8 & b_real [7:0] $end
$var reg 1 ' clk $end
$var reg 2 ( data_valid [1:0] $end
$scope module dut $end
$var wire 8 ) a_imag [7:0] $end
$var wire 8 * a_real [7:0] $end
$var wire 8 + b_imag [7:0] $end
$var wire 8 , b_real [7:0] $end
$var wire 1 ' clk $end
$var wire 2 - data_valid [1:0] $end
$var wire 16 . z_imag [15:0] $end
$var wire 16 / z_real [15:0] $end
$var reg 8 0 a_imag_reg [7:0] $end
$var reg 8 1 a_real_reg [7:0] $end
$var reg 8 2 b_imag_reg [7:0] $end
$var reg 8 3 b_real_reg [7:0] $end
$var reg 16 4 img [15:0] $end
$var reg 16 5 k1 [15:0] $end
$var reg 16 6 k2 [15:0] $end
$var reg 16 7 k3 [15:0] $end
$var reg 16 8 mult1 [15:0] $end
$var reg 16 9 mult2 [15:0] $end
$var reg 16 : res [15:0] $end
$var reg 3 ; state [2:0] $end
$var reg 16 < temp [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b1 -
b11 ,
b100 +
b1 *
b10 )
b1 (
0'
b11 &
b100 %
b1 $
b10 #
b0 "
b0 !
$end
#5
b1 ;
b100 2
b11 3
b10 0
b1 1
1'
#10
b0 %
b0 +
b0 &
b0 ,
b0 #
b0 )
b0 $
b0 *
b0 (
b0 -
0'
#15
b10 ;
b110 9
b1 8
1'
#20
0'
#25
b110 <
b100 9
b100 8
b11 ;
1'
#30
b1000 %
b1000 +
b110 &
b110 ,
b100 #
b100 )
b10 $
b10 *
b1 (
b1 -
0'
#35
b110 5
b1000 2
b110 3
b100 0
b10 1
b10000 <
b10 9
b10 8
b1 ;
1'
#40
b0 %
b0 +
b0 &
b0 ,
b0 #
b0 )
b0 $
b0 *
b0 (
b0 -
0'
#45
b100 <
b1100 9
b10 ;
b10000 6
1'
#50
0'
#55
b11 ;
b100 7
b11000 <
b1000 9
b1000 8
1'
#60
b111 %
b111 +
b101 &
b101 ,
b11 #
b11 )
b1 $
b1 *
b1 (
b1 -
0'
#65
b1000000 <
b0 9
b0 8
b1010 "
b1010 .
b1010 4
b1111111111110110 !
b1111111111110110 /
b1111111111110110 :
b11000 5
b111 2
b101 3
b11 0
b1 1
b1 ;
1'
#70
b0 %
b0 +
b0 &
b0 ,
b0 #
b0 )
b0 $
b0 *
b0 (
b0 -
0'
#75
b10 ;
b1000000 6
b0 <
b1010 9
b1 8
1'
#80
0'
#85
b1010 <
b110 9
b111 8
b11 ;
b0 7
1'
#90
b1 (
b1 -
b10 %
b10 +
b1 &
b1 ,
b10 #
b10 )
b1 $
b1 *
0'
#95
b11000 "
b11000 .
b11000 4
b1111111111011000 !
b1111111111011000 /
b1111111111011000 :
b1010 5
b10 2
b1 3
b10 0
b101010 <
b100 9
b11 8
b1 ;
1'
#100
b0 %
b0 +
b0 &
b0 ,
b0 #
b0 )
b0 $
b0 *
b0 (
b0 -
0'
#105
b1100 <
b1 8
b10 ;
b101010 6
1'
#110
0'
#115
b11 ;
b1100 7
b100 <
b10 9
b10 8
1'
#120
b1 (
b1 -
b110 %
b110 +
b101 &
b101 ,
b100 #
b100 )
b11 $
b11 *
0'
#125
b0 9
b0 8
b10110 "
b10110 .
b10110 4
b1111111111100000 !
b1111111111100000 /
b1111111111100000 :
b100 5
b110 2
b101 3
b100 0
b11 1
b1 ;
1'
#130
b0 %
b0 +
b0 &
b0 ,
b0 #
b0 )
b0 $
b0 *
b0 (
b0 -
0'
#135
b10 ;
b100 6
b0 <
b1010 9
b11 8
1'
#140
0'
#145
b11110 <
b1000 9
b110 8
b11 ;
b0 7
1'
#150
b1 (
b1 -
0'
#155
b100 "
b100 .
b100 4
b0 !
b0 /
b0 :
b11110 5
b0 2
b0 3
b0 0
b0 1
b110000 <
b10 9
b100 8
b1 ;
1'
#160
b0 (
b0 -
0'
#165
b1000 <
b0 9
b0 8
b10 ;
b110000 6
1'
#170
0'
#175
b11 ;
b1000 7
b0 <
1'
#180
b1 (
b1 -
0'
#185
b100110 "
b100110 .
b100110 4
b1111111111101110 !
b1111111111101110 /
b1111111111101110 :
b0 5
b1 ;
1'
#190
b0 (
b0 -
0'
#195
b10 ;
b0 6
1'
#200
0'
#205
b11 ;
b0 7
1'
#210
0'
#215
b0 "
b0 .
b0 4
b0 !
b0 /
b0 :
b0 ;
1'
#220
0'
#225
1'
#230
0'
#235
1'
#240
0'
#245
1'
#250
0'
#255
1'
#260
0'
#265
1'
#270
0'
#275
1'
#280
0'
#285
1'
#290
0'
#295
1'
#300
0'
#305
1'
#310
0'
#315
1'
#320
0'
#325
1'
#330
0'
#335
1'
#340
0'
#345
1'
#350
0'
#355
1'
#360
0'
#365
1'
#370
0'
#375
1'
#380
0'
#385
1'
#390
0'
